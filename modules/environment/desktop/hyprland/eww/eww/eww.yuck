(defvar eww "eww")
(defvar loginctl "loginctl")
(defvar poweroff "poweroff")
(defvar reboot "reboot")

(defwindow powermenu
  :monitor 0
  :stacking "fg"
  :exclusive false
  :focusable "none"
  :windowtype "normal"
  :geometry (geometry
              :width "100%"
              :height "100%")
  (powermenu-layout))

(defwidget powermenu-layout []
  (box :class "layout-btn" :space-evenly false :orientation "vertical"
    (box :valign "start" :space-evenly false :spacing 25
      (_sundial)
      (battery)
      (network)
      (label :text "|" :class "sep")
      (button :onclick "${eww} close powermenu" :class "close-btn" ""))
    (box :space-evenly false :hexpand true :vexpand true
      (box :spacing 15 :class "tm-box" :space-evenly false :valign "end"
           :halign "start"
        (label :text "")
        (label :text "${time.hour}:${time.min}"))
      (buttons))))

; (defwidget buttons []
;   (_buttons :shutdown poweroff
;             :shutdown_icon ""
;             :reboot reboot
;             :reboot_icon ""
;             :logout "${loginctl} kill-session self"
;             :logout_icon ""))

(defwidget network []
  (_network :strength {wifi.signal}
            :offline "󰣼"
            :excellent "󰣺"
            :good "󰣸"
            :okay "󰣶"
            :slow "󰣴"))

(defwidget battery []
  (_battery :status {battery-info.status}
            :battery {battery-info.capacity}
            :charging "󰂄"
            :c-100    "󰁹"
            :c-90     "󰂂"
            :c-80     "󰂁"
            :c-70     "󰂀"
            :c-60     "󰁿"
            :c-50     "󰁾"
            :c-40     "󰁽"
            :c-30     "󰁼"
            :c-20     "󰁻"
            :c-10     "󰁺"
            :c-0      "󰂃"))

(defpoll time :interval "5s" `date +'{"hour": "%H", "min": "%M", "date": "%y-%m-%d"}'`)
(defpoll wifi :interval "30s"
  `nmcli -t -f SSID,SIGNAL,ACTIVE device wifi \
  | awk -F ':' '{if($3=="yes")print "{\\"ssid\\": \\""$1"\\", \\"signal\\": \\""$2"\\"}" }'`)
(defpoll volume-percent :interval "3s"
  `amixer -D pulse sget Master \
  | awk -F'[][]' '/Left:/ {print $2}' \
  | tr -d '%'`)
(defpoll mic-percent :interval "3s"
  `amixer -D pulse sget Capture \
  | awk -F'[][]' '/Left:/ {print $2}' \
  | tr -d '%'`)
(defpoll brightness-percent :interval "5s"
  `brightnessctl -m -d intel_backlight \
  | awk -F, '{print substr($4, 8, length($4)-1)}' \
  | tr -d '%'`)
(defpoll battery :interval "15s" "./scripts/battery.sh")
(defpoll memory :interval "15s"
  `free -L \
  | awk -F' ' '{ print "{ \\"total\\": \\""($6 + $8)"\\", \\"used\\": \\""$6"\\", \\"free\\": \\""$8"\\" }" }'`)

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_reveal false)
(defvar time_reveal false)

(deflisten workspaces :initial '[]' "./scripts/get-workspaces.sh")
(deflisten current-workspace :initial "1" "./scripts/get-active-workspace.sh")
(defwidget workspaces []
  (eventbox :onscroll "./scripts/change-active-workspace.sh {} ${current-workspace}" :class "workspace-widget"
    (box :space-evenly true
      (label :text "${workspaces}${current-workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}" :class "workspace-entry ${workspace.id == current-workspace ? 'current' : ""}'}")))))))

(deflisten window :initial "..." "./scripts/get-window-title.sh")
(defwidget window-title []
  (box
    (label :text "${window}")))

(defvar COL_WLAN "#ffffff")
(defvar WLAN_ICON {wifi.})

(defwidget wifi []
  (eventbox :onhover "${EWW_CMD} update wifi_reveal=true"
            :onhoverlost "${EWW_CMD} update wifi_reveal=false"
    (box :vexpand false :hexpand false :space-evenly false
      (button :class "module-wif"
              :onclick "networkmanager_dmenu"
              :wrap false
              :limit-width 12
              :style "color: ${COL_WLAN};"
        WLAN_ICON)
      (revealer :transition "slideright"
                :reveal wifi_reveal
                :duration "350ms"
        (label :class "module_essid"
               :text {wifi.ssid}
               :orientation "h")))))

(defwidget bat []
  (box :class "bat_module" :vexpand false :hexpand false
    (circular-progress :value battery :class "batbar" :thickness 4
      (button :class "iconbat"
              :limit-width 2
              :tooltip "battery on ${battery}%"
              :show_truncated false
              ; TODO add system window
              :onclick "echo 'open system'"
              :wrap false
              ""))))

(defwidget mem []
  (box :class "mem_module" :vexpand false :hexpand false
    (circular-progress :value "${memory.used / memory.total}%"
                       :class "membar"
                       :thickness 4
      (button :class "iconmem"
              :limit-width 2
              :tooltip "using ${memory.used / memory.total}% RAM"
              ; TODO add system window
              :onclick "echo system menu"
              :show_truncated false
              :wrap false
              ""))))

(defwidget sep []
  (box :class "module-2" :vexpand false :hexpand false
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "${EWW_CMD} update time_reveal=true"
            :onhoverlost "${EWW_CMD} update time_reveal=false"
    (box :class "module"
         :space-evenly false
         :orientation "h"
         :spacing 3
      (label :text clock :class "clock_time_class clock_minute_class")
      (revealer :transition "slideleft"
                :reveal time_reveal
                :duration "350ms"
        (button :class "clock_date_class"
                :onclick "echo calendar"
          {time.date})))))

(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update vol_reveal=true"
            :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box :class "module-2" :space-evenly false :orientation "h" :spacing 3
      ; TODO add audio menu
      (button :onclick "echo audio menu" :class "volume_icon" "")
      (revealer :transition "slideLeft"
                :reveal vol_reveal
                :duration "350ms"
        (scale :class "volbar"
               :value volume-percent
               :orientation "h"
               :tooltip "${volume-percent}%"
               :max 100
               :min 0
               :onchange "pamixer --set-volume {}")))))

(defwidget bright []
  (eventbox :onhover "${EWW_CMD} update br_reveal=true"
            :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box :class "module-2" :space-evenly false orientation "h" :spacing 3
      (label :text "󰃠" :class "bright_icon" :tooltip "brightness")
      (revealer :transition "slideLeft"
                :reveal br_reveal
                :duration "350ms"
        (scale :class "brightbar"
               :value brightness-percent
               :orientation "h"
               :tooltip "${brightness-percent}%"
               :max 100
               :min 0
               :onchange "brightnessctl set {}%")))))

(defwidget music []
  (eventbox :onhover "${EWW_CMD} update music_reveal=true"
            :onhoverlost "${EWW_CMD} update music_reveal=false"
    (box :class "module-2"
         :orientation "h"
         :space-evenly false
         :vexpand false
         :hexpand false
      (box :class "song_cover_art" :vexpand false :hexpand false :style "background-image: url('${cover_art}');")
      (button :class "song"
              :wrap true
              ; TODO add music menu
              :onclick "echo music menu"
        song)
      (revealer :transition "slideRight"
                :reveal music_reveal
                :duration "350ms"
        (box :vexpand false :hexpand false :orientation "h"
          (button :class "song_btn_prev"
                  :onclick "./scripts/music_info.sh --prev"
            "<")
          (button :class "song_btn_play"
                  :onclick "./scripts/music_info.sh --toggle"
            song_status)
          (button :class "song_btn_next"
                  :onclick "./scripts/music_info.sh --next"
            ">"))))))

(defwidget left []
  (box :orientation "h"
       :space-evenly false
       :halign "end"
       :class "left_modules"
    (bright)
    (volume)
    (wifi)
    (sep)
    (bat)
    (mem)
    (sep)
    (clock_module)))

(defwidget right []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
       :class "right_modules"
    (workspaces)))

(defwidget center []
  (box :orientation "h"
       :space-evenly false
       :halign "center"
       :class "center_modules"
    (music)))

(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
    (right)
    (center)
    (left)))

(defwindow bar :geometry (geometry :x "0%"
                                   :y "9px"
                                   :width "98%"
                                   :height "30px"
                                   :anchor "top center")
               :stacking "fg"
               :windowtype "dock"
  (bar_1))

(defwidget clock [] "${time.hour}:${time.min}")

; (defwidget _buttons [shutdown shutdown_icon
;                      reboot reboot_icon
;                      logout logout_icon]
;   (box :class "btns-box" :spacing 5
;        :vexpand true :hexpand true
;        :valign "end" :halign "end"
;        :space-evenly false
;     (button :onclick shutdown shutdown_icon)
;     (button :onclick reboot reboot_icon)
;     (button :onclick logout logout_icon)))

(defwidget _network [strength offline excellent good okay slow]
  {strength == "" ? offline :
   strength < 26 ? slow :
   strength < 51 ? okay :
   strength < 76 ? good :
   excellent})

(defwidget _battery
  [battery status
   charging c-100 c-90 c-80 c-70 c-60 c-50 c-40 c-30 c-20 c-10 c-0]
  {status == "Charging" ? charging :
   battery < 5 ? c-0 :
   battery < 10 ? c-10 :
   battery < 20 ? c-20 :
   battery < 30 ? c-30 :
   battery < 40 ? c-40 :
   battery < 50 ? c-50 :
   battery < 60 ? c-60 :
   battery < 70 ? c-70 :
   battery < 80 ? c-80 :
   battery < 90 ? c-90 :
   c-100})

; (defwidget _sundial []
;   (label :class "sundial-lbl" :halign "end" :hexpand true
;     :text {time.hour <= 2 ? "Midnight" :
;            time.hour <= 4 ? "Early morning" :
;            time.hour <= 5 ? "Dawn" :
;            time.hour <= 8 ? "Morning" :
;            time.hour <= 11 ? "Late morning" :
;            time.hour <= 12 && time.min <= 29 ? "Midday" :
;            time.hour <= 16 ? "Afternoon" :
;            time.hour <= 17 ? "Late afternoon" :
;            time.hour <= 18 && time.min <= 29 ? "Early evening" :
;            time.hour <= 19 ? "Dusk" :
;            time.hour <= 21 ? "Late evening" :
;            "Night"}))
