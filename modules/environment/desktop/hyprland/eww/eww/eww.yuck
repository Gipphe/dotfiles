(defwindow bar :geometry (geometry :x "0%"
                                   :y "9px"
                                   :width "98%"
                                   :height "30px"
                                   :anchor "top center")
               :exclusive true
               :stacking "overlay"
  (bar-layout))

(defwidget bar-layout []
  (box :class "bar_class"
       :orientation "h"
       :hexpand false
    (left)
    (center)
    (right)))

(defwidget left []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
       :class "left_modules"
    (workspaces)
    (window-title)))

(defwidget center []
  (box :orientation "h"
       :space-evenly false
       :halign "center"
       :class "center_modules"
    (music)))

(defwidget right []
  (box :orientation "h"
       :space-evenly false
       :halign "end"
       :class "right_modules"
    (bright)
    (volume)
    (wifi)
    (sep)
    (bat)
    (mem)
    (sep)
    (tray)
    (sep)
    (clock_module)))

(defvar loginctl "loginctl")
(defvar poweroff "poweroff")
(defvar reboot "reboot")

(defpoll time :interval "5s"
  `date +'{"hour": "%H", "min": "%M", "date": "%Y-%m-%d"}'`)
(defpoll calendar :interval "1h"
  `date +'{"day": "%d", "year": "%Y"}'`)
(defpoll wifi :interval "30s"
  `nmcli -t -f SSID,SIGNAL,ACTIVE device wifi \
  | awk -F ':' '{if($3=="yes")print "{\\"ssid\\": \\""$1"\\", \\"signal\\": \\""$2"\\"}" }'`)
(defpoll volume-percent :interval "3s" `pamixer --get-volume`)
(defvar mic-percent "100")
; (defpoll mic-percent :interval "3s"
;   `amixer -D pulse sget Capture \
;   | awk -F'[][]' '/Left:/ {print $2}' \
;   | tr -d '%'`)
(defpoll brightness-percent :interval "5s"
  `brightnessctl -m -d intel_backlight | awk -F, '{print $4}' | tr -d '%'`)
; (defpoll battery :interval "15s" "./scripts/battery.sh")
(defpoll memory :interval "15s"
  `free -L \
  | awk -F' ' '{ print "{ \\"total\\": \\""($6 + $8)"\\", \\"used\\": \\""$6"\\", \\"free\\": \\""$8"\\" }" }'`)

(defpoll music :interval "15s" "./scripts/music_info.sh")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_reveal false)
(defvar time_reveal false)

(defwidget tray []
  (systray :spacing 4
           :orientation "h"
           :space-evenly true
           :prepend-new true
           :icon-size 20))

(deflisten workspaces :initial '[]' "./scripts/get-workspaces.sh")
(deflisten current-workspace :initial "1" "./scripts/get-active-workspace.sh")
(defwidget workspaces []
  (eventbox :onscroll "./scripts/change-active-workspace.sh {} ${current-workspace}" :class "workspace-widget"
    (box :space-evenly true :hexpand false :vexpand false
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace}"
          (box :class "workspace-entry ${workspace == current-workspace ? 'current' : ''}"
            (label :text "${workspace}")))))))

(deflisten window :initial "..." "./scripts/get-window-title.sh")
(defwidget window-title []
  (box :class "window-title" :vexpand false :hexpand false :show_truncated true
    (label :text {strlength(window) > 30 ? "${substring(window, 0, 60)}..." : window})))

(defwidget wifi []
  (eventbox :onhover "${EWW_CMD} update wifi_reveal=true"
            :onhoverlost "${EWW_CMD} update wifi_reveal=false"
    (box :vexpand false :hexpand false :space-evenly false
      (button :class "module-wif"
              :onclick "networkmanager_dmenu"
              :wrap false
              :limit-width 12
              :style "color: #ffffff;"
        (network))
      (revealer :transition "slideRight"
                :reveal wifi_reveal
                :duration "350ms"
        (label :class "module_essid"
               :text {wifi.ssid}
               :orientation "h")))))

(defwidget bat []
  (box :class "bat_module" :vexpand false :hexpand false
    (circular-progress :value {EWW_BATTERY.BAT1.capacity}
                       :class "batbar"
                       :thickness 4
                       :min 0
                       :max 100
      (button :class "iconbat"
            :tooltip "battery on ${EWW_BATTERY.BAT1.capacity}%"
            :limit-width 2
            :show_truncated false
            :onclick "EWW_CMD='${EWW_CMD}' ./scripts/pop.sh system"
            :wrap false
            {EWW_BATTERY.BAT1.status == "Charging" ? "" : ""}))))

(defwidget mem []
  (box :class "mem_module" :vexpand false :hexpand false
    (circular-progress :value {memory.used / memory.total}
                       :class "membar"
                       :thickness 4
                       :min 0
                       :max 100
      (button :class "iconmem"
              :limit-width 2
              :tooltip "using ${round(memory.used / memory.total * 100, 0)}% RAM"
              :onclick "EWW_CMD='${EWW_CMD}' ./scripts/pop.sh system"
              :show_truncated false
              :wrap false
              ""))))

(defwidget sep []
  (box :class "module-2" :vexpand false :hexpand false
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "${EWW_CMD} update time_reveal=true"
            :onhoverlost "${EWW_CMD} update time_reveal=false"
    (box :class "module"
         :space-evenly false
         :orientation "h"
         :spacing 3
      (label :text "${time.hour}:${time.min}" :class "clock_time_class clock_minute_class")
      (revealer :transition "slideleft"
                :reveal time_reveal
                :duration "350ms"
        (button :class "clock_date_class"
                :onclick "echo calendar"
          {time.date})))))

(defwidget volume-icon []
  {volume-percent > 66 ? "" :
   volume-percent > 33 ? "" :
   volume-percent > 0 ? "" :
   ""})

(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update vol_reveal=true"
            :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box :class "module-2" :space-evenly false :orientation "h" :spacing 3
      (button :onclick "EWW_CMD='${EWW_CMD}' ./scripts/pop.sh audio"
              :class "volume_icon"
        (volume-icon))
      (revealer :transition "slideLeft"
                :reveal vol_reveal
                :duration "350ms"
        (scale :class "volbar"
               :value volume-percent
               :orientation "h"
               :tooltip "${volume-percent}%"
               :max 100
               :min 0
               :onchange "pamixer --set-volume {} && ${EWW_CMD} poll volume-percent")))))

(defwidget bright []
  (eventbox :onhover "${EWW_CMD} update br_reveal=true"
            :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box :class "module-2" :space-evenly false :orientation "h" :spacing 3
      (label :text "󰃠" :class "bright_icon" :tooltip "brightness")
      (revealer :transition "slideLeft"
                :reveal br_reveal
                :duration "350ms"
        (scale :class "brightbar"
               :value brightness-percent
               :orientation "h"
               :tooltip "${brightness-percent}%"
               :max 100
               :min 0
               :onchange "brightnessctl set {}% && ${EWW_CMD} poll brightness-percent")))))

(defwidget music []
  (eventbox :onhover "${EWW_CMD} update music_reveal=true"
            :onhoverlost "${EWW_CMD} update music_reveal=false"
    (box :class "module-2"
         :orientation "h"
         :space-evenly false
         :vexpand false
         :hexpand false
      (box :class "song_cover_art" :vexpand false :hexpand false :style "background-image: url('${music.cover}');")
      (button :class "song"
              :wrap true
              :onclick "EWW_CMD='${EWW_CMD}' ./scripts/pop.sh music"
        {music.song})
      (revealer :transition "slideRight"
                :reveal music_reveal
                :duration "350ms"
        (box :vexpand false :hexpand false :orientation "h"
          (button :class "song_btn_prev"
                  :onclick "mpc -q prev"
            "")
          (button :class "song_btn_play"
                  :onclick "mpc -q toggle"
            {music.status})
          (button :class "song_btn_next"
                  :onclick "mpc -q next"
            ""))))))


(defwidget clock [] "${time.hour}:${time.min}")

(defwidget network []
  (_network :strength {wifi.signal}
            :offline "󰣼"
            :excellent "󰣺"
            :good "󰣸"
            :okay "󰣶"
            :slow "󰣴"))

(defwidget _network [strength offline excellent good okay slow]
  {strength == "" ? offline :
   strength < 26 ? slow :
   strength < 51 ? okay :
   strength < 76 ? good :
   excellent})

(defwidget battery []
  (_battery :status {EWW_BATTERY.BAT1.status}
            :battery {EWW_BATTERY.BAT1.capacity}
            :charging "󰂄"
            :c-100    "󰁹"
            :c-90     "󰂂"
            :c-80     "󰂁"
            :c-70     "󰂀"
            :c-60     "󰁿"
            :c-50     "󰁾"
            :c-40     "󰁽"
            :c-30     "󰁼"
            :c-20     "󰁻"
            :c-10     "󰁺"
            :c-0      "󰂃"))

(defwidget _battery
  [battery status
   charging c-100 c-90 c-80 c-70 c-60 c-50 c-40 c-30 c-20 c-10 c-0]
  {status == "Charging" ? charging :
   battery < 5 ? c-0 :
   battery < 10 ? c-10 :
   battery < 20 ? c-20 :
   battery < 30 ? c-30 :
   battery < 40 ? c-40 :
   battery < 50 ? c-50 :
   battery < 60 ? c-60 :
   battery < 70 ? c-70 :
   battery < 80 ? c-80 :
   battery < 90 ? c-90 :
   c-100})

(defwidget _sundial []
  (label :class "sundial-lbl" :halign "end" :hexpand true
    :text {time.hour <= 2 ? "Midnight" :
           time.hour <= 4 ? "Early morning" :
           time.hour <= 5 ? "Dawn" :
           time.hour <= 8 ? "Morning" :
           time.hour <= 11 ? "Late morning" :
           time.hour <= 12 && time.min <= 29 ? "Midday" :
           time.hour <= 16 ? "Afternoon" :
           time.hour <= 17 ? "Late afternoon" :
           time.hour <= 18 && time.min <= 29 ? "Early evening" :
           time.hour <= 19 ? "Dusk" :
           time.hour <= 21 ? "Late evening" :
           "Night"}))

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value {EWW_BATTERY.BAT1.capacity}
                :class "sys_bat"
                :thickness 9
            (label :text "󰁹"
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${EWW_BATTERY.BAT1.capacity}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${EWW_BATTERY.BAT1.status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text "󰍛"
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${memory.used} | ${memory.total}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${memory.free}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))))

(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal" 
                :day {calendar.day} 
                :year {calendar.year}))))

(defwindow calendar
  :geometry (geometry
              :x "-20px"
              :y "7%"
              :anchor "top right"
              :width "270px" 
              :height "60px")
  (cal))

(defwidget audio []
  (box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "speaker_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
        (box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale :value volume-percent
                 :space-evenly "false"
                 :orientation "h"
                 :onchange "pamixer --set-volume {}"
                 :tooltip "volume on ${volume-percent}%"
                 :max 100
                 :min 0))))
    (label :text "" :class "audio_sep" :halign "center")
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "mic_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
        (box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale :value mic-percent
                 :space-evenly "false"
                 :orientation "h"
                 :tooltip "mic on ${mic-percent}%"
                 :onchange "amixer -D pulse sset Capture {}%" 
                 :max 100
                 :min 0))))))

(defwindow audio_ctl
  :geometry (geometry :x "-20px" 
                      :y "7%" 
                      :anchor "top right"
                      :width "280px" 
                      :height "60px")
  (audio))

(defwindow system
  :geometry (geometry :x "-20px" 
                      :y "7%" 
                      :anchor "top right"
                      :width "290px" 
                      :height "120px")
  (system))

;;  Music
(defwidget music_pop []
  (box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${music.cover}');")
    (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :halign "center" :class "music" :wrap "true" :limit-width 13 :text {music.song})
      (label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text {music.artist})
      (box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
        (button :class "music_btn_prev" :onclick "mpc -q prev" "")
        (button :class "music_btn_play" :onclick "mpc -q toggle" {music.status})
        (button :class "music_btn_next" :onclick "mpc -q next" ""))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
        (scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value {music.time})))))

;;  music
(defwindow music_win
  :stacking "fg"
  :focusable "false"
  :screen 1
  :geometry (geometry :x "0"
                      :y "7%"
                      :width 428
                      :height 104
                      :anchor "top center")
  (music_pop))
